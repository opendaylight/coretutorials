package ncmount.impl.listener;

import ncmount.impl.NcmountProvider;
import org.opendaylight.yang.gen.v1.org.opendaylight.coretutorials.ncmount.example.notifications.rev150611.ExampleNotificationsListener;
import org.opendaylight.yang.gen.v1.org.opendaylight.coretutorials.ncmount.example.notifications.rev150611.VrfRouteNotification;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This is default implementation of a notification listener listening to notifications defined
 * in Example-notifications.yang model. The interface ExampleNotificationsListener is generated by yangtools
 * and an implementation has to be provided by users.
 * <p/>
 * The Example-notifications model contains just a single notification definition and thus this listener
 * implements only a single method. Each model with 1 or more notifications gets just a single listener where
 * the number of callbacks is equal to number of defined notifications.
 */
public class LoggingNotificationListener implements ExampleNotificationsListener {

    private static final Logger LOG = LoggerFactory.getLogger(NcmountProvider.class);

    /**
     * Callback for vrf-route-notification notification.
     *
     * @param notification notification object
     */
    @Override
    public void onVrfRouteNotification(final VrfRouteNotification notification) {
        LOG.info("Notification {} received {}", VrfRouteNotification.QNAME, notification);
        // Notification can be read/handled using generated notification object e.g:
        // notification.getVrfPrefixes().getVrfPrefix();
        // The application can handle the prefixes from notification here in any way it sees fit, a few examples:
        // - Store the data in ODL's datastore
        // - Forward the data to another mounted netconf device (or all of them)
    }

}
