<?xml version="1.0" encoding="UTF-8"?>
<!-- vi: set et smarttab sw=4 tabstop=4: -->
<!-- Copyright (c) 2013 Cisco Systems, Inc. and others. All rights reserved.
    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html INTERNAL TODO:
    Refine this list and tighten up the explanation of the parent pom.xml The
    parent POM defines all the resources you need to pull into your project such
    as: - dependencies - licenses - utilities - repository declaration - plugin
    configuration - DependencyManagement ie what versions and scope of dependencies
    can be referenced (maybe over-ridden) -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion> <!-- MAVEN version of the model (not the MAVEN version) -->

    <parent>
        <groupId>org.opendaylight.odlparent</groupId>
        <artifactId>odlparent</artifactId>
        <!-- MANDATORY TODO: This specific SNAPSHOT version refers to the Lithium
            working SNAPSHOT. INTERNAL TODO: HOW DOES A PROJECT FIND THIS INFORMATION
            OUT ??? Always verify SNAPSHOT version by checking the root pom.xml in the
            odlparent project for the release you are working with -->
        <version>1.6.1-SNAPSHOT</version>
        <!-- This is a local file system path, and is used for an override. It
            tells maven not to go to the root pom.xml for this project, which refers
            to this pom.xml. OPTIONAL TODO: May remove this. -->
        <relativePath></relativePath>
    </parent>

    <groupId>org.opendaylight.toaster</groupId>
    <artifactId>toaster-parent</artifactId>
    <name>Toaster parent</name>
    <version>0.1.0-SNAPSHOT</version> <!-- Note using same version from Root pom.xml -->
    <packaging>pom</packaging> <!-- This line is very important, we aren't making any other side-effects
        than the POM -->

    <prerequisites>
        <maven>3.1.1</maven> <!-- MANDATORY TODO: Current MVN version, please verify current ODL version
            of MVN needed -->
    </prerequisites>

    <licenses>
        <license>
            <name>The Eclipse Public License v1.0</name>
            <url>http://www.eclipse.org/legal/epl-v10.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <!-- INTERNAL TODO: Need explanation of what's going on. -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <sitedeploy>dav:http://nexus.opendaylight.org/content/sites/site</sitedeploy>

        <!-- These properties are used in later sections. If you don't specify
            plugin versions MVN will give a warning, and the below enforces the version
            number for consistency. INTERNAL TODO: These may/should be moved to the odlparent
            project -->
        <maven.info.reports.version>2.7</maven.info.reports.version>

        <!-- YANG tools artifacts -->
        <yangtools.version>0.8.1-SNAPSHOT</yangtools.version>

        <!-- Controller artifacts -->
        <!-- These need to be at this layer, as opposed to odlparent, as it gives
            the project control of its own versioning. These declarations control the
            version of the dependencies that are pulled into your project. It's important
            that projects, if they modify these versions, then take responsibility for
            maintaining the versioning. -->
        <controller.config.version>0.4.1-SNAPSHOT</controller.config.version> <!-- Refers to the config subsystem version -->
        <!-- Framework is the protocol framework. INTERNAL TODO: Decide if to leave
            this in but commented or deleted. If we do this, what other options do we
            need to include here as options <controller.framework.version>0.7.0-SNAPSHOT</controller.framework.version> -->
        <controller.mdsal.version>1.3.1-SNAPSHOT</controller.mdsal.version>
        <controller.restconf.version>1.3.1-SNAPSHOT</controller.restconf.version>

        <!-- Sonar config -->
        <!-- Only required for "external" projects. ie for projects within the
            project, this is not required. -->
        <sonar-jacoco-listeners.version>2.4</sonar-jacoco-listeners.version>
        <sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
        <sonar.jacoco.reportPath>target/code-coverage/jacoco.exec</sonar.jacoco.reportPath>
        <sonar.jacoco.itReportPath>target/code-coverage/jacoco-it.exec</sonar.jacoco.itReportPath>
        <sonar.profile>Sonar way with Findbugs</sonar.profile>

        <!-- Root directory for YANGtool generated-sources -->
        <!-- INTERNAL TODO: We need to revist this as the implication of putting this
        under src is that it's written not generated code. It should exist under the target
        directory (rovarga). The issue is that if this ends up in SCM (git), every build will
        cause a new "version". If you use src/<foo> and don't want it in SCM (git) then ensure
        you have a corresponding entry in .gitignore
        -->

        <salGeneratorPath>target/generated-sources/sal</salGeneratorPath>
        <jmxGeneratorPath>target/generated-sources/config</jmxGeneratorPath>

        <!-- TODO: john karaf related properties moved from the pom.xml in the features directory-->
        <!-- Optional TODO: Move these properties to your parent pom and possibly
      DependencyManagement section of your parent pom -->
        <branding.version>1.1.4-SNAPSHOT</branding.version>
        <karaf.resources.version>1.6.1-SNAPSHOT</karaf.resources.version>
        <!-- TODO: what is this ... is this equal to yangtools.version -->
        <feature.test.version>0.8.0-SNAPSHOT</feature.test.version>
    </properties>

    <!-- dependencyManagement is like a "definition" of where you can set up
        information about each dependency, but it is then referenced in the dependencySection,
        and potentially override things from this section -->
    <dependencyManagement>
        <dependencies>
            <!-- This project -->
            <dependency>
                <groupId>org.opendaylight.toaster</groupId>
                <artifactId>toaster-artifacts</artifactId> <!-- Reference to the artifacts/pom.xml -->
                <!-- INTERNAL TODO: Need to validate the below, rovarga *thinks* this
                    is fine but needs to noodle on it. -->
                <version>${project.version}</version>
                <!-- Looks for artifacts/pom.xml and imports the dependency management
                    section of that pom (we are in dependency management here) -->
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- YANG tools -->
            <dependency>
                <!-- INTERNAL TODO: Lets describe this better. YangTools generates all
                    the artifacts from the YANG files. -->
                <groupId>org.opendaylight.yangtools</groupId>
                <artifactId>yangtools-artifacts</artifactId>
                <version>${yangtools.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- Config subsystem infrastructure -->
            <dependency>
                <groupId>org.opendaylight.controller</groupId>
                <artifactId>config-artifacts</artifactId>
                <version>${controller.config.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- MDSAL infrastructure -->
            <dependency>
                <groupId>org.opendaylight.controller</groupId>
                <artifactId>mdsal-artifacts</artifactId>
                <version>${controller.mdsal.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>

            <!-- SONAR -->
            <dependency>
                <groupId>org.codehaus.sonar-plugins.java</groupId>
                <artifactId>sonar-jacoco-listeners</artifactId>
                <version>${sonar-jacoco-listeners.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!-- Sonar -->
        <dependency>
            <groupId>org.codehaus.sonar-plugins.java</groupId>
            <artifactId>sonar-jacoco-listeners</artifactId>
        </dependency>
    </dependencies>

    <!-- INTERNAL TODO: rovarga doesn't know how this works. Keith check with
        Ed/Ryan on what this is. -->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven.info.reports.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-info</report>
                            <report>license</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <id>non-aggregate</id>
                        <reports>
                            <report>javadoc</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <!--plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>findbugs-maven-plugin</artifactId>
                <version>2.4.0</version> <configuration> <effort>Max</effort> <threshold>Low</threshold>
                <goal>site</goal> </configuration> </plugin -->
        </plugins>
    </reporting>
    <!-- End unknown section -->

    <!-- INTERNAL TODO: This should be part of our jenkins system. This tells
        the build system where to put the artifacts in Nexus. Keith check with Andy
        and Thanh if we can remove from the POM tag distributionManagement. -->
    <distributionManagement>
        <!-- OpenDayLight Released artifact -->
        <repository>
            <id>opendaylight-release</id>
            <url>http://nexus.opendaylight.org/content/repositories/opendaylight.release/</url>
        </repository>
        <!-- OpenDayLight Snapshot artifact -->
        <snapshotRepository>
            <id>opendaylight-snapshot</id>
            <url>http://nexus.opendaylight.org/content/repositories/opendaylight.snapshot/</url>
        </snapshotRepository>
        <!-- Site deployment -->
        <site>
            <id>website</id>
            <url>${sitedeploy}</url>
        </site>
    </distributionManagement>

    <!-- Build information as well as verions. INTERNAL TODO: this should probably
        live in odlparent but the odlparent project hasn't made enough progress. -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version.source}</source>
                    <target>${java.version.target}</target>
                    <testSource>${java.version.source}</testSource>
                    <testTarget>${java.version.target}</testTarget>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <optimize>true</optimize>
                </configuration>
            </plugin>
            <plugin> <!-- INTERNAL TODO: Find the Surefire wiki page and reference here. This
                    is where Maven Unit tests are loaded. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <runOrder>alphabetical</runOrder> <!-- This can be problematic if tests misbehave. -->
                    <threadCount>1</threadCount>

                    <!-- Specific to generate mapping between tests and covered code in
                        SONAR -->
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>org.sonar.java.jacoco.JUnitListener</value>
                        </property>
                    </properties>

                </configuration>
            </plugin>

            <!-- Deals with how MVN deals with dependencies, and tuning what it should
                WARN about The two "true" items says "fail on WARNING but only in the Compile
                phase -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <configuration>
                    <failOnWarning>true</failOnWarning>
                    <ignoreNonCompile>true</ignoreNonCompile>
                </configuration>
            </plugin>

            <!-- INTERNAL TODO: Not required, its to ensure that generated-sources
                show up as source folders in Eclipse. -->
            <plugin>
                <!-- Let eclipse know about the generated sources -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <!-- INTERNAL TODO: This appears to be hardcoded but what if YANGTOOLs
                            changes its behaviour of where stuff is generated???? -->
                        <configuration>
                            <sources>
                                <source>${salGeneratorPath}</source>
                                <source>${jmxGeneratorPath}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Enforces whitespace checking etc. Can enforce project specific checkstyle -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <failOnViolation>true</failOnViolation>
                    <!-- The config XML below comes from the YANGTOOLS project. -->
                    <configLocation>checkstyle-logging.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <sourceDirectory>${project.basedir}</sourceDirectory>
                    <includes>**\/*.java,**\/*.xml,**\/*.ini,**\/*.sh,**\/*.bat,**\/*.yang</includes>
                    <excludes>**\/target\/,**\/bin\/,**\/target-ide\/,**\/src/main/yang-gen-config\/,**\/src/main/yang-gen-sal\/,**\/.m2repo\/</excludes>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.opendaylight.yangtools</groupId>
                        <artifactId>checkstyle-logging</artifactId>
                        <version>${yangtools.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Default bindings for unit tests and integration tests. INTERNAL TODO:
                Validate against SONAR wiki HOW-TO. This should be in odlparent. -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>prepare-ut-agent</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.reportPath}</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>prepare-it-agent</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.itReportPath}</destFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <!-- Specifies versions, except for Eclipse mapping -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>1.8</version>
                </plugin>

                <!--This plugin's configuration is used to store Eclipse m2e settings
                    only. It has no influence on the Maven build itself. This makes eclipse usage
                    "nicer" OPTIONAL TODO: include if you want your eclipse nicer INTERNAL TODO:
                    Is this historical? Have things advanced that we no longer need this? -->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>pl.project13.maven</groupId>
                                        <artifactId>git-commit-id-plugin</artifactId>
                                        <versionRange>[2.1.4,)</versionRange>
                                        <goals>
                                            <goal>revision</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.opendaylight.yangtools</groupId>
                                        <artifactId>yang-maven-plugin</artifactId>
                                        <versionRange>[0.5,)</versionRange>
                                        <goals>
                                            <goal>generate-sources</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>org.jacoco</groupId>
                                        <artifactId>jacoco-maven-plugin</artifactId>
                                        <versionRange>[0.6,)</versionRange>
                                        <goals>
                                            <goal>prepare-agent</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>

                <!-- Our YANG->DTO generation plugin
                INTERNAL TODO: Eventually (Jan15)
                    this will be pulled in from a YANGTOOLS POM Using simple version from controller
                    ... *** alagalah -->
                <plugin>
                    <groupId>org.opendaylight.yangtools</groupId>
                    <artifactId>yang-maven-plugin</artifactId>
                    <version>${yangtools.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.opendaylight.mdsal</groupId>
                            <artifactId>maven-sal-api-gen-plugin</artifactId>
                            <version>${yangtools.version}</version>
                            <type>jar</type>
                        </dependency>
                    </dependencies>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
